name: 'terraform deployment'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  terraform:
    name: 'Terraform deployment'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
    - name: Git Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: GitHub-OIDC-TERRAFORM

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Pull Terraform tfvars from S3
      env:
        AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
        AWS_TFVARS_KEY: ${{ secrets.AWS_TFVARS_KEY }}
      run: |
        aws s3 cp s3://${AWS_BUCKET_NAME}/${AWS_TFVARS_KEY} tfvars/$ENVIRONMENT/terraform.tfvars

    - name: Terraform Init
      env:
        AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
        AWS_BUCKET_KEY: ${{ secrets.AWS_BUCKET_KEY }}
      run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY}"
      
    - name: Terraform Validate
      run: terraform validate -no-color

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Plan
      id: terraform-plan
      run: terraform plan -input=false -var-file=tfvars/$ENVIRONMENT/terraform.tfvars
      if: github.event_name == 'pull_request'
      continue-on-error: true
    
    - name: Terraform Plan Status
      if: steps.terraform-plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'pull_request'
      run: terraform apply -auto-approve -input=false -var-file=tfvars/$ENVIRONMENT/terraform.tfvars
